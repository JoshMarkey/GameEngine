#ifdef GL_ES
precision highp float;
#endif

uniform sampler2D u_Texture;
uniform vec3 u_ViewPos;          
uniform mat4 u_Viewing;       
uniform mat4 u_InverseView;
uniform vec3 u_LightPos;
uniform float u_Brightness;
varying vec2 v_TexCoord;


varying vec3 v_Normal;
varying vec3 v_FragPos;

//Hard coded light pos
//vec3 lightPos = vec3(-10, 20, -10);

vec3 diffuseColor = vec3(1, 1, 1);
vec3 specularColor = vec3(1, 1, 1);

void main()
{
  vec4 viewPos = u_InverseView * vec4(0, 0, 0, 1);

  vec4 tex = texture2D(u_Texture, v_TexCoord);

  vec3 N = normalize(v_Normal);
  vec3 lightDir = normalize(u_LightPos - v_FragPos);
  float diff = max(dot(N, lightDir), 0.4);
  vec3 diffuse = diffuseColor * diff;

  vec4 viewDir = normalize(viewPos - vec4(v_FragPos, 0.0));
  vec4 reflectDir = vec4(reflect(-lightDir, N),0);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);
  vec3 specular = spec * specularColor;

  vec3 lighting = diffuse + specular;
  gl_FragColor = vec4(lighting, 1) * tex * u_Brightness;
}                     